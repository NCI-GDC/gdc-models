#!/usr/bin/env python

import os
import sys
from subprocess import check_output, CalledProcessError

import yaml


def get_git_root():
    try:
        base = check_output('git rev-parse --show-toplevel', shell=True)
    except CalledProcessError:
        raise IOError('Current working directory is not a git repository')

    git_root = base.decode('utf-8').strip()
    if git_root == '':
        git_root = '.'  # git rev-parse fails, then current dir is git_root

    return git_root


def process_yaml(yaml_file, format_yaml):
    with open(yaml_file, 'r') as y:
        yaml_text = y.read()

    yaml_data = yaml.load(yaml_text)
    yaml_dump = yaml.dump(yaml_data, default_flow_style=False)

    if yaml_text != yaml_dump and yaml_dump != 'null\n...\n':  # only format it when not empty
        if format_yaml:
            with open(yaml_file, 'w') as y:
                y.write(yaml_dump)
            print('Formatted YAML file: ' + yaml_file)

            with open(yaml_file + '.bak', 'w') as y:
                y.write(yaml_text)
            print('Original YAML file kept as: ' + yaml_file + '.bak')
            return 0
        else:
            print('YAML needs to be formatted: ' + yaml_file)
            return 1
    else:
        return 0


def main(format_yaml):
    os.chdir(get_git_root())
    ret_value = 0
    for path, _, files in os.walk("."):
        if path.startswith('./.git') or path.startswith('./git-hooks'):
            continue

        for f in files:
            if f.startswith('.') or not f.endswith('.yaml'):
                continue

            yaml_file = os.path.join(path, f)
            ret_value += process_yaml(yaml_file, format_yaml)

    if ret_value:
        return 1
    else:
        return 0


if __name__ == '__main__':
    fmt_yaml = bool(sys.argv[1:] and sys.argv[1] == 'format')

    sys.exit(main(fmt_yaml))
